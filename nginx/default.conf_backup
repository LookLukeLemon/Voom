proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=7d use_temp_path=off;

upstream nextjs_upstream {
  server web:3000;
}

server {
  listen 80;
	server_name voom.cf;

  location /.well-known/acme-challenge/ {
      root /var/www/certbot;
  }

  location / {
      return 301 https://$host$request_uri;
  }
}

server {
  listen 443 ssl;

  server_name voom.cf;
  ssl_certificate /etc/letsencrypt/live/voom.cf/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/voom.cf/privkey.pem;
  # Disable SSL
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  # 통신과정에서 사용할 암호화 알고리즘
  ssl_prefer_server_ciphers on;
  ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

  server_tokens off;

  gzip on;
  gzip_proxied any;
  gzip_comp_level 4;
  gzip_types text/css application/javascript image/svg+xml;

  

  # Enable HSTS
  # client의 browser에게 http로 어떠한 것도 load 하지 말라고 규제합니다.
  # 이를 통해 http에서 https로 redirect 되는 request를 minimize 할 수 있습니다.
  add_header Strict-Transport-Security "max-age=31536000" always;

  

  location /_next/static {
    proxy_cache STATIC;
    proxy_pass http://nextjs_upstream;
  }

  location /static {
    proxy_cache STATIC;
    proxy_ignore_headers Cache-Control;
    proxy_cache_valid 60m;
    proxy_pass http://nextjs_upstream;
  }

  location / {
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;

    proxy_pass http://nextjs_upstream;
  }

  location /socket.io/ {
    proxy_pass http://nextjs_upstream;
    proxy_redirect off;

    proxy_http_version      1.1;
    proxy_set_header        Upgrade                 $http_upgrade;
    proxy_set_header        Connection              "upgrade";

    proxy_set_header        Host                    $host;
    proxy_set_header        X-Real-IP               $remote_addr;
    proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
  }
}